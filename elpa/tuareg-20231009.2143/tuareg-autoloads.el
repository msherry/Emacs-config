;;; tuareg-autoloads.el --- automatically extracted autoloads (do not edit)   -*- lexical-binding: t -*-
;; Generated by the `loaddefs-generate' function.

;; This file is part of GNU Emacs.

;;; Code:

(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))



;;; Generated autoloads from dot-emacs.el

(register-definition-prefixes "dot-emacs" '("my-tuareg-mode-setup"))


;;; Generated autoloads from ocamldebug.el

(autoload 'ocamldebug "ocamldebug" "\
Run ocamldebug on program FILE in buffer *ocamldebug-FILE*.
The directory containing FILE becomes the initial working directory
and source-file directory for ocamldebug.  If you wish to change this, use
the ocamldebug commands `cd DIR' and `directory'.

(fn PGM-PATH)" t)
(defalias 'camldebug #'ocamldebug)
(register-definition-prefixes "ocamldebug" '("def-ocamldebug" "ocamldebug-"))


;;; Generated autoloads from tuareg.el

(add-to-list 'auto-mode-alist '("\\.ml[ip]?\\'" . tuareg-mode))
(add-to-list 'auto-mode-alist '("\\.eliomi?\\'" . tuareg-mode))
(dolist (ext '(".cmo" ".cmx" ".cma" ".cmxa" ".cmi"
               ".annot" ".cmt" ".cmti"))
 (add-to-list 'completion-ignored-extensions ext))
(autoload 'tuareg-mode "tuareg" "\
Major mode for editing OCaml code.

Provides automatic indentation and compilation interface.  Performs font/color
highlighting using Font-Lock.  It is designed for OCaml but handles
Caml Light as well.

The Font-Lock minor-mode is used according to your customization
options.

You have better byte-compile tuareg.el.

For customization purposes, you should use `tuareg-mode-hook'
(run for every file) or `tuareg-load-hook' (run once) and not patch
the mode itself.  You should add to your configuration file something like:
  (add-hook \\='tuareg-mode-hook
            (lambda ()
               ... ; your customization code
            ))
For example you can change the indentation of some keywords, the
`electric' flags, Font-Lock colors... Every customizable variable is
documented, use `C-h-v' or look at the mode's source code.

`dot-emacs.el' is a sample customization file for standard changes.
You can append it to your `.emacs' or use it as a tutorial.

`M-x ocamldebug' FILE starts the OCaml debugger ocamldebug on the executable
FILE, with input and output in an Emacs buffer named *ocamldebug-FILE*.

A Tuareg Interactive Mode to evaluate expressions in a REPL (aka toplevel) is
included.  Type `M-x tuareg-run-ocaml' or simply `M-x run-ocaml' or see
special-keys below.

Short cuts for the Tuareg mode:
\\{tuareg-mode-map}

Short cuts for interactions with the REPL:
\\{tuareg-interactive-mode-map}

(fn)" t)
(with-eval-after-load 'compile (let ((rule (eval-when-compile `(ocaml ,(rx bol (32 (group-n 9 "       ")) (group-n 1 (or "File " (seq (or "Raised at" "Re-raised at" "Raised by primitive operation at" "Called from") (* nonl) " file ")) (group-n 2 (32 "\"")) (group-n 3 (+ (not (in "	
 \",<>")))) (backref 2) (32 " (inlined)") ", line" (32 "s") " " (group-n 4 (+ (in "0-9"))) (32 "-" (group-n 5 (+ (in "0-9")))) (32 ", character" (32 "s") " " (group-n 6 (+ (in "0-9"))) (32 "-" (group-n 7 (+ (in "0-9"))))) (32 ":")) (32 "
" (* (in "	 ")) (* (or (seq (+ (in "0-9")) " | " (* nonl)) (+ "^")) "
" (* (in "	 "))) (group-n 8 (or "Warning" "Alert") (* (not (in ":
"))) ":"))) 3 (4 . 5) (6 . tuareg--end-column) (8 . 9) 1 (8 font-lock-function-name-face))))) (defvar compilation-error-regexp-alist) (defvar compilation-error-regexp-alist-alist) (setq compilation-error-regexp-alist-alist (assq-delete-all 'ocaml compilation-error-regexp-alist-alist)) (push rule compilation-error-regexp-alist-alist) (setq compilation-error-regexp-alist (delq 'ocaml compilation-error-regexp-alist)) (push 'ocaml compilation-error-regexp-alist)))
(autoload 'tuareg--end-column "tuareg" "\
Return the end-column number in a parsed OCaml message.
OCaml uses exclusive end-columns but Emacs wants them to be inclusive.")
(autoload 'tuareg-run-ocaml "tuareg" "\
Run an OCaml REPL process.  I/O via buffer `*OCaml*'." t)
(defalias 'run-ocaml #'tuareg-run-ocaml)
(add-to-list 'interpreter-mode-alist '("ocamlrun" . tuareg-mode))
(add-to-list 'interpreter-mode-alist '("ocaml" . tuareg-mode))
(register-definition-prefixes "tuareg" '("tuareg-"))


;;; Generated autoloads from tuareg-compat.el

(register-definition-prefixes "tuareg-compat" '("tuareg--"))


;;; Generated autoloads from tuareg-menhir.el

(add-to-list 'auto-mode-alist '("\\.mly\\'" . tuareg-menhir-mode))
(autoload 'tuareg-menhir-mode "tuareg-menhir" "\
Major mode to edit Menhir (and Ocamlyacc) files.

(fn)" t)
(register-definition-prefixes "tuareg-menhir" '("tuareg-menhir-"))


;;; Generated autoloads from tuareg-opam.el

(autoload 'tuareg-opam-mode "tuareg-opam" "\
Major mode to edit opam files.

(fn)" t)
(autoload 'tuareg-opam-update-env "tuareg-opam" "\
Update the environment to follow current OPAM switch configuration.

Delegate the task to `opam-switch-set-switch' if the minor mode
`opam-switch-mode' (https://github.com/ProofGeneral/opam-switch-mode)
is installed. This ELPA package also provides a menu-bar and a
mode-bar menu `\"OPSW\"'.

(fn SWITCH)" t)
(make-obsolete 'tuareg-opam-update-env 'opam-switch-set-switch "2023-07")
(add-to-list 'auto-mode-alist '("[./]opam_?\\'" . tuareg-opam-mode))
(register-definition-prefixes "tuareg-opam" '("tuareg-" "verbose-tuareg-opam-smie-rules"))

;;; End of scraped data

(provide 'tuareg-autoloads)

;; Local Variables:
;; version-control: never
;; no-byte-compile: t
;; no-update-autoloads: t
;; no-native-compile: t
;; coding: utf-8-emacs-unix
;; End:

;;; tuareg-autoloads.el ends here
